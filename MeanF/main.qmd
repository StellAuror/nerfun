```{r}
source(file.path(rstudioapi::getActiveProject(), "run.R"))
```

## Tukey

Trying the *robust* linear model

```{r}
# Dopasowanie odpornego modelu liniowego dla każdej grupy Species
robust_models <- iris %>%
  group_by(Species) %>%
  summarise(
    model = list(rlm(Sepal.Width ~ Sepal.Length, data = cur_data())),
    .groups = "drop"
  )

# Pobranie współczynników dla każdej grupy
coefficients <- robust_models %>%
  mutate(coef = lapply(model, coef)) %>%
  unnest_wider(coef, names_sep = "_") %>%
  rename(intercept = `coef_(Intercept)`, slope = `coef_Sepal.Length`)

# Wizualizacja danych z liniami regresji odpornych dla każdej grupy
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_point(alpha = 0.7) +  # Punkty danych
  geom_smooth(method = "lm", se = FALSE) +
  geom_abline(data = coefficients, 
              aes(intercept = intercept, slope = slope, color = Species), 
              show.legend = FALSE) +  # Linie regresji odpornej
  labs(title = "Robust Linear Model on Iris Data by Species",
       x = "Sepal Length (cm)",
       y = "Sepal Width (cm)") +
  theme_minimal()

```

```{r, warning=FALSE}
# Predict
ldfRQ <- datasets::airquality |> f.split_data(.5, 1)

model <- lm(Ozone ~ Solar.R + Wind + Temp + Month, data = ldfRQ$Learn)
ldfRQ$Test$Prediction <- predict(model, ldfRQ$Test)

ldfRQ$Test |> 
  ggplot(aes(
    y = Prediction,
    x = Ozone,
  )) + 
  geom_segment(aes(yend = Ozone)) +
  geom_point(size = 3) +
  geom_abline(slope = 1) +
  scale_x_continuous(limits = c(0, 125)) + 
  scale_y_continuous(limits = c(0, 125)) +
  theme_minimal() +
  annotate(
    "label",
    y = 100,
    x = 0,
    label = f.pred_txtstats(ldfRQ$Test$Ozone, ldfRQ$Test$Prediction, c = 10),
    hjust = 0
  ) 


ldfRQ$Test |> 
  ggplot(aes(
    y = Prediction - Ozone,
    x = Prediction,
  )) + 
  geom_segment(aes(yend = 0)) +
  geom_point(size = 3) +
  geom_hline(yintercept = 0) +
  theme_minimal() +
  annotate(
    "label",
    y = 10,
    x = -50,
    label = f.pred_txtstats(ldfRQ$Test$Ozone, ldfRQ$Test$Prediction, c = 10),
    hjust = 0
  ) 
```

```{r, warning=FALSE}
library(tidyverse)
library(gghalves) # Do rysowania połówek wykresów
library(viridis)  # Do skali kolorów viridis

ldfRQ$Test |>
  select(Ozone, Prediction) |>
  pivot_longer(names_to = "Type", values_to = "Value", cols = 1:2) |>
  ggplot(aes(
    y = Value,
    x = Type,
    color = Type,
    fill = Type
  )) +
  geom_half_boxplot(
    side = "l", # Po lewej stronie
    alpha = 0.5,
    outlier.shape = NA
  ) +
  geom_half_violin(
    side = "r", # Po prawej stronie
    alpha = 0.5,
    trim = TRUE
  ) +
  geom_half_point(
    side = "r", # Punkty tylko na prawej stronie
    alpha = 0.8,
    position = position_jitter(width = 0.1), # Lekko przesunięte w poziomie
    size = 2, # Dostosowanie rozmiaru punktów
    color = "black" # Ciemniejsze punkty
  ) +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  theme_minimal() +
  theme(legend.position = "none") 


```

